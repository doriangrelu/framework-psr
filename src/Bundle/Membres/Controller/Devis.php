<?php
/**
 * Created by PhpStorm.
 * User: doria
 * Date: 08/01/2018
 * Time: 16:02
 */

namespace App\Bundle\Membres\Controller;


use App\Bundle\Database\Table\QuotationTable;
use App\Bundle\Database\Table\StatusTable;
use App\Bundle\Database\Table\UnityTable;
use App\Bundle\Membres\MembresBundle;
use App\Bundle\Membres\Model\Client;
use App\Bundle\Membres\Model\QuotationsModel;
use Framework\Database\NoRecordException;
use Framework\Exception\DevisGenerationException;
use GuzzleHttp\Psr7\Response;
use Psr\Container\ContainerInterface;
use Psr\Http\Message\ServerRequestInterface;
use Spipu\Html2Pdf\Exception\Html2PdfException;
use Spipu\Html2Pdf\Html2Pdf;

class Devis extends MembresBundle
{
    /**
     * @var Client
     */
    private $clientModel;

    /**
     * @var QuotationsModel
     */
    private $quotationsModel;

    public function initialize(ServerRequestInterface $request, ContainerInterface $container)
    {
        parent::initialize($request, $container); // TODO: Change the autogenerated stub
        $this->clientModel = $this->container->get(Client::class);
        $this->quotationsModel = $this->container->get(QuotationsModel::class);
    }

    /**
     *
     */
    public function creer()
    {
        try {
            $validator = $this->getValidator();
            $validator->required("client", "object", "validity_deadline", "line");
            if ($validator->isValid()) {
                $this->validerCreationDevis(); //Lève une Exception si le devis n'est pas conforme
                if ($this->quotationsModel->createQuotation($this->usersId, $this->parsedBody)) {
                    $this->flash->success("Devis enregistré avec succès");
                    return $this->redirect("devis");
                }
            }
            $this->flash->error("Une erreur est survenue lors de la creation du devis");
        } catch (DevisGenerationException $e) {
            $this->flash->error($e->getMessage());
        } catch (\Exception $e) {
            $this->flash->error("Une erreur est survenue lors de la creation du devis");
        }
        return $this->redirect("devis");
    }

    public function pdf(string $slug)
    {
        try {
            $unityTable=$this->container->get(UnityTable::class);
            $devis = $this->quotationsModel->getDevisByIdUsersAndSlug($this->usersId, $slug);
            $this->renderer->make([
                "unitiesList"=>$unityTable->findList(),
                "entreprise" => $this->usersTable->find($this->usersId),
                "devis" => $devis,
                "client" => $this->quotationsModel->getClientFromDevis($this->usersId, $slug),
                "details" => $this->quotationsModel->getDetailsCalculMontantDuDevis($this->usersId, $slug),
                "total" => $this->quotationsModel->getMontantDevis($this->usersId, $slug),
                "unities" => $this->quotationsModel->getUnities(),
                "modifiable" => $this->quotationsModel->peutModifierLeDevis($this->usersId, $devis->id),
                "status" => $this->quotationsModel->getStatusDevis($this->usersId, $devis->id),
                "historique" => $this->quotationsModel->historiqueModificationDevis($this->usersId, $devis->id),
                "payments" => $this->quotationsModel->getPayments($this->usersId, $devis->id)
            ]);
            $htmltoPdf = new Html2Pdf('p', 'A4', 'fr');
            $htmltoPdf->writeHTML($this->renderer->render("Devis"));
            return new Response(200, ["Content-Type" => "application/pdf"], $htmltoPdf->output('Doc.pdf', 'S'));
        } catch (NoRecordException $e) {
            dd($e);
        } catch (Html2PdfException $e) {
            dd($e);
        } catch (\Exception $e) {
            dd($e);
        }
        return "";
    }

    public function afficher(string $slug)
    {
        $this->renderer->setLayout("Simple");
        try {
            $devis = $this->quotationsModel->getDevisByIdUsersAndSlug($this->usersId, $slug);
            $devisComplet = $this->quotationsModel->getDevisByIdUsersAndSlug($this->usersId, $slug);
            $this->renderer->make([
                "devis" => $devisComplet,
                "details" => $this->quotationsModel->getDetailsCalculMontantDuDevis($this->usersId, $slug),
                "total" => $this->quotationsModel->getMontantDevis($this->usersId, $slug),
                "client" => $this->quotationsModel->getClientFromDevis($this->usersId, $slug),
                "unities" => $this->quotationsModel->getUnities(),
                "modifiable" => $this->quotationsModel->peutModifierLeDevis($this->usersId, $devisComplet->id),
                "status" => $this->quotationsModel->getStatusDevis($this->usersId, $devisComplet->id),
                "historique" => $this->quotationsModel->historiqueModificationDevis($this->usersId, $devisComplet->id),
                "statusListe" => $this->quotationsModel->getStatusListe(),
                "payments" => $this->quotationsModel->getPayments($this->usersId, $devis->id)
            ]);
            return $this->renderer->render("Afficher");
        } catch (NoRecordException $e) {
            $this->flash->error("Le devis portant le <b>N°$slug</b> n'a pas été trouvé.");
            return $this->redirect("devis");
        }
    }

    public function modifier()
    {
        try {
            $validator = $this->getValidator();
            $validator->required("id_devis", "object", "validity_deadline", "line");
            if ($validator->isValid()) {
                // dd($this->parsedBody);
                if ($this->quotationsModel->peutModifierLeDevis($this->usersId, $this->parsedBody["id_devis"])) {
                    $this->validerCreationDevis(); //Lève une Exception si le devis n'est pas conforme
                    if ($this->quotationsModel->modifier($this->usersId, $this->parsedBody["id_devis"], $this->parsedBody)) {
                        $quotation = $this->table->load(QuotationTable::class)->find($this->parsedBody["id_devis"]);
                        $this->flash->success("Devis enregistré avec succès");
                        return $this->redirect("membre.devis.show", ["slug" => $quotation->slug]);
                    }
                }
            }
            $this->flash->error("Une erreur est survenue lors de l'enregistrement du devis");
        } catch (DevisGenerationException $e) {
            $this->flash->error($e->getMessage());
        } catch (\Exception $e) {
            $this->flash->error("Une erreur est survenue lors de la creation du devis");
        }
        return $this->redirect("devis");
    }

    /**
     * Lève une Exception si le devis n'est pas conforme
     */
    private function validerCreationDevis()
    {
        $this->checkNbLinesDevis();
        $this->checkTauxTotalRemise();
        $this->checkTauxTotalAcomptes();
    }

    /**
     * @throws DevisGenerationException
     */
    private function checkNbLinesDevis()
    {
        $nbLine = count($this->parsedBody["line"]);
        if ($nbLine == 0) {
            throw new DevisGenerationException("Le devis doit comprter au moins une ligne.");
        }
    }

    /**
     * @throws DevisGenerationException
     */
    private function checkTauxTotalAcomptes()
    {
        $acompte = 0;
        if (isset($this->parsedBody["acompe"])) {
            foreach ($this->parsedBody["acompte"] as $line) {
                $acompte += $line["amount"];
            }
        }

        if (floor($acompte) > 90) {
            throw new DevisGenerationException("Le taux total des acomptes ne peut être de plus de 90%");
        }
    }

    /**
     * @throws DevisGenerationException
     */
    private function checkTauxTotalRemise()
    {
        $remise = 0;
        $idRemise = $this->table->load(UnityTable::class)->findBy(["slug" => "remise"])->id;
        foreach ($this->parsedBody["line"] as $line) {
            if ($line["id_unity_type"] == $idRemise) {
                $remise += $line["unity_price"];
            }
        }
        if (floor($remise) > 100) {
            throw new DevisGenerationException("Le montant total des remises ne peux être supérieur à 100%");
        }
    }

}