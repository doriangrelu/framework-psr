<?php
/**
 * Created by PhpStorm.
 * User: dorian
 * Date: 29/11/17
 * Time: 17:00
 */

namespace App\Bundle\Auth\Controller;


use App\Bundle\Auth\AuthBundle;
use App\Bundle\Auth\Model\Connexion;
use App\Bundle\Auth\Model\Inscription;
use App\Bundle\Database\Table\UsersTable;
use Framework\Auth\User;
use Framework\Auth\UserInterface;
use Framework\Exception\RequiredTotpException;
use Framework\Mailer\Mailer;
use Framework\Session\ErrorsManager;
use Framework\Validator;
use GuzzleHttp\Psr7\Response;
use Psr\Container\ContainerInterface;
use Psr\Http\Message\ServerRequestInterface;

class Auth extends AuthBundle
{
    /**
     * @var Inscription
     */
    protected $model;
    /**
     * @var Connexion
     */
    protected $connexionModel;

    public function initialize(ServerRequestInterface $request, ContainerInterface $container)
    {
        parent::initialize($request, $container); // TODO: Change the autogenerated stub
        $this->model = $this->loadModel(Inscription::class);
        $this->connexionModel = $this->loadModel(Connexion::class);
    }

    public function beforeFilter()
    {
        if ($this->isAlreadyConnected()) {
            $this->flash->warning("Vous avez été déconnecté");
            $this->disconnect();
            return $this->redirect("home");
        }
        $this->session->delete("secret");
        $this->session->delete($this->connexionModel::TEMP);
        return null;
    }

    private function disconnect()
    {
        $this->session->delete($this->connexionModel::TOKEN_SESSION);
        $this->session->delete($this->connexionModel::ID_SESSION);
        $this->session->delete($this->connexionModel::ROLE_SESSION);
    }

    private function isAlreadyConnected(): bool
    {
        return $this->databaseAuth->getUser() instanceof UserInterface;
    }

    public function formulaireConnexion()
    {
        $this->setPage("Connexion");
        return $this->renderer->render("Connexion");
    }

    public function formulaireInscription()
    {
        $this->setPage("Inscription");
        return $this->renderer->render("Inscription");
    }

    public function setInscription()
    {
        $validator = $this->getValidator();
        $validator->required("first_name", "last_name", "mail", "birthday", "phone", "cp", "city", "siret", "password")
            ->notEmpty("first_name", "last_name", "mail", "birthday", "phone", "cp", "city", "siret", "password")
            ->mail("mail")
            ->unique("mail", "users", $this->container->get(\PDO::class), null, "mail")
            ->unique("siret", "users", $this->container->get(\PDO::class), null, "siret")
            ->dateTime("birthday")
            ->phoneNumber("phone")
            ->codePostal("cp")
            ->siret("siret");
        if ($validator->hasError()) { //il y a une erreur dans le formulaire, alors on redirige en mettant en session les erreurs
            $this->flash->error("Le formulaire comprends des erreurs");
            $this->setErrors($validator, $this->parsedBody);
        } else {//Tout est bon alors on créer le compte utilisateur
            if ($this->model->signUp($this->parsedBody)) {
                $this->flash->success("Vous avez été inscrit avec succès, vous pouvez vous connecter");
                return $this->redirect("form.connexion");
            } else {
                $this->setErrors($validator, $this->parsedBody);
                $this->flash->error("L'inscription a echouée");
            }
        }
        return $this->redirect("form.inscription");
    }

    public function seConnecter()
    {
        $validator = $this->getValidator();
        $validator->notEmpty("mail", "password");
        if (!$validator->hasError()) {
            try {
                $persist= isset($this->parsedBody["persist"]);
                if ($this->connexionModel->setConnexion($this->post->get("mail"), $this->post->get("password"), false, $persist)) {
                    $this->flash->success("Vous avez été connecté avec succès !");
                    $idUsers=$this->session->get(Connexion::ID_SESSION);
                    $logFile=ROOT."config".DS."log".DS.$idUsers.".txt";
                    $date=date("d/m/Y à H:i");
                    $ip=$this->request->getServerParams()["REMOTE_ADDR"];
                    $log="- Connexion le <b>$date</b> par <b>$ip</b><br>\n";
                    file_put_contents($logFile, $log, FILE_APPEND);
                    return $this->redirect($this->container->get("app.redirect.conexion"));
                }
            } catch (RequiredTotpException $e) {
                $this->flash->info("Veuillez saisir votre code de validation");
                return $this->redirect("form.totp");
            } catch (\Exception $e) {
                $this->setErrors($validator, $this->parsedBody);
                $this->flash->error("Identifiant ou mot de passe incorrect");
                return $this->redirect("form.connexion");
            }
        }
        if (isset($this->parsedBody["password"])) {
            unset($this->parsedBody["password"]);
        }
        $this->setErrors($validator, $this->parsedBody);
        $this->flash->error("Identifiant ou mot de passe incorrect");
        return $this->redirect("form.connexion");
    }

}