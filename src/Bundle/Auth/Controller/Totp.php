<?php
/**
 * Created by PhpStorm.
 * User: doria
 * Date: 27/12/2017
 * Time: 19:02
 */

namespace App\Bundle\Auth\Controller;


use App\Bundle\Auth\AuthBundle;
use App\Bundle\Auth\Model\Connexion;
use App\Bundle\Database\Entity\Users;
use App\Bundle\Database\Table\UsersTable;
use Psr\Container\ContainerInterface;
use Psr\Http\Message\ServerRequestInterface;

class Totp extends AuthBundle
{

    /**
     * @var UsersTable
     */
    protected $usersTable;
    /**
     * @var Connexion
     */
    protected $connexionModel;

    public function initialize(ServerRequestInterface $request, ContainerInterface $container)
    {
        parent::initialize($request, $container); // TODO: Change the autogenerated stub
        $this->connexionModel = $this->loadModel(Connexion::class);
        $this->usersTable = $this->table->load(UsersTable::class);
    }

    public function desactiver()
    {
        $user=$this->connexionModel->userIsConnected();
        if(isset($this->parsedBody["password"]) && isset($this->parsedBody["code"]) && $this->connexionModel->userIsConnected() !== null) {
            $userEntity=$this->usersTable->find($user->getUserId());
            if($this->connexionModel->activedTOTP($user->getUserId()) && $this->connexionModel->checkPasswordWhenUserConnected($this->parsedBody["password"])){
                if($this->verifyCodeActivation($userEntity->totpKey, $this->parsedBody["code"]) && $this->connexionModel->desactiverTotp()){
                    $this->flash->success("Authentification en deux étapes désactivée avec succès !");
                    return $this->redirect("params.show");
                }
            }
        }
        $this->flash->error("Echec de la désactivation de l'authentification à deux facteurs");
        return $this->redirect("params.show");
    }

    public function showCode()
    {
        $temp = $this->session->get($this->connexionModel::TEMP);
        if (!is_null($temp)) {
            if ($this->request->getMethod() == "POST") {
                try {
                    if(!$this->connexionModel->checkTempConnexion($temp)){
                        throw new \Exception();
                    }
                    /**
                     * @var Users
                     */
                    $users = $this->usersTable->findBy("mail", $temp->email);
                    if (isset($this->parsedBody["code"])  &&
                        $this->verifyCodeActivation($users->totpKey, $this->parsedBody["code"])) {
                        $this->connexionModel->setConnexion($temp->email, null, true);
                        $this->flash->success("Vous avez été connecté avec succès !");
                        return $this->redirect("params.show");
                    } else {
                        $this->flash->error("Le code de vérification est erroné !");
                        return $this->redirect("form.totp");
                    }
                } catch (\Exception $e) {
                    $this->session->delete($this->connexionModel::TEMP);
                    $this->flash->error("Veuillez vous authentifier");
                    return $this->redirect("form.connexion");
                }
            } else {
                $this->setPage("Connexion");
                return $this->renderer->render("code");
            }
        }
        $this->session->delete($this->connexionModel::TEMP);
        $this->flash->error("Veuillez vous authentifier");
        return $this->redirect("form.connexion");
    }


    /**
     * @param $secret
     * @param $key
     * @return bool
     */
    private function verifyCodeActivation($secret, $key): bool
    {
        $otp = \OTPHP\TOTP::create($secret);
        return $otp->verify($key);
    }

    public function activer()
    {
        $user = $this->connexionModel->userIsConnected();
        if (!is_null($user) && !$this->connexionModel->activedTOTP()) {
            if ($this->request->getMethod() == "POST") {
                $secret = (string)$this->session->get("secret");
                if (isset($this->parsedBody["code"]) && !is_null($secret)) {
                    if ($this->verifyCodeActivation($secret, $this->parsedBody["code"]) && $this->connexionModel->activerToTp($secret)) {
                        $this->flash->success("Activation à deux facteurs activée");
                        return $this->redirect("params.show");
                    }
                }
                $this->flash->error("Code de vérification éronné");
                return $this->redirect("otp.active");
            } else {
                $secret = $this->session->get("secret");
                $retour = $this->connexionModel->otp($secret);
                $this->session->set("secret", $retour["secret"]);
                if (!is_null($retour)) {
                    $this->renderer->make([
                        "code" => $retour["code"]
                    ]);
                    return $this->renderer->render("Active");
                }
            }
        }
        $this->flash->info("L'authentification à deux facteur est déjà activée");
        return $this->generateUri("params.show");
    }

}